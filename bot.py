import asyncio
import firebase_admin
from firebase_admin import credentials, db
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# Telegram bot token
TELEGRAM_BOT_TOKEN = "***********"

# Firebase setup
cred = credentials.Certificate("./google-services.json")  # –§–∞–π–ª –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
firebase_admin.initialize_app(cred, {
    'databaseURL': "*************************"
})

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
class ThresholdState(StatesGroup):
    waiting_for_min_threshold = State()
    waiting_for_max_threshold = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[ 
        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ üíæ", callback_data="get_data")],
        [InlineKeyboardButton(text="ü•í–í–∫–ª—é—á–∏—Ç—å —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="enable_manual")],
        [InlineKeyboardButton(text="‚öôÔ∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–∏", callback_data="set_thresholds")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
manual_control_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí¶–í–∫–ª—é—á–∏—Ç—å —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å", callback_data="enable_humidifier")],
        [InlineKeyboardButton(text="‚òî–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å", callback_data="disable_humidifier")],
        [InlineKeyboardButton(text="üç∫–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º", callback_data="disable_manual")]
    ]
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
async def fetch_data():
    humidity_ref = db.reference('house/humidity')
    temp_ref = db.reference('house/temp')
    gas_ref = db.reference('house/raw_value')

    humidity = humidity_ref.get()
    temp = temp_ref.get()
    gas = gas_ref.get()

    if humidity is None or temp is None or gas is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."

    return f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚ò£ –ì–∞–∑: {gas}"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ Firebase
def update_firebase(ref_path, value):
    ref = db.reference(ref_path)
    ref.set(value)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π:", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ üíæ"
@dp.callback_query(lambda c: c.data == "get_data")
async def get_data(callback_query: CallbackQuery):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    data = await fetch_data()
    await callback_query.message.edit_text(data, reply_markup=main_menu_keyboard)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    asyncio.create_task(auto_update_data(callback_query.message))

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def auto_update_data(message):
    while True:
        await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data = await fetch_data()
        await message.edit_text(data, reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "ü•í–í–∫–ª—é—á–∏—Ç—å —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
@dp.callback_query(lambda c: c.data == "enable_manual")
async def enable_manual(callback_query: CallbackQuery):
    update_firebase('house/is_manual', True)
    update_firebase('house/manual', False)
    await callback_query.message.edit_text("–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manual_control_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí¶–í–∫–ª—é—á–∏—Ç—å —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å"
@dp.callback_query(lambda c: c.data == "enable_humidifier")
async def enable_humidifier(callback_query: CallbackQuery):
    update_firebase('house/manual', True)
    await callback_query.message.edit_text("–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –≤–∫–ª—é—á—ë–Ω.", reply_markup=manual_control_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚òî–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å"
@dp.callback_query(lambda c: c.data == "disable_humidifier")
async def disable_humidifier(callback_query: CallbackQuery):
    update_firebase('house/manual', False)
    await callback_query.message.edit_text("–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=manual_control_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üç∫–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"
@dp.callback_query(lambda c: c.data == "disable_manual")
async def disable_manual(callback_query: CallbackQuery):
    update_firebase('house/is_manual', False)
    await callback_query.message.edit_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–∏"
@dp.callback_query(lambda c: c.data == "set_thresholds")
async def start_threshold_setting(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(ThresholdState.waiting_for_min_threshold)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
@dp.message(ThresholdState.waiting_for_min_threshold)
async def process_min_threshold(message: Message, state: FSMContext):
    try:
        min_threshold = int(message.text)
        await state.update_data(min_threshold=min_threshold)
        await state.set_state(ThresholdState.waiting_for_max_threshold)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
@dp.message(ThresholdState.waiting_for_max_threshold)
async def process_max_threshold(message: Message, state: FSMContext):
    try:
        max_threshold = int(message.text)
        user_data = await state.get_data()
        min_threshold = user_data.get("min_threshold")

        if max_threshold <= min_threshold:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º Firebase
        update_firebase("/house/humidity_low", min_threshold)
        update_firebase("/house/humidity_high", max_threshold)

        await message.answer(
            f"–ü–æ—Ä–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {min_threshold}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {max_threshold}"
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
